<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>Stylish Jekyll Theme</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>A Generic Architecture for Text Classification with Machine Learning</title>
				<description>&lt;p&gt;One of the most commons tasks in Machine Learning is text classification, which is simply teaching your machine how to read and interpret a text and predict what kind of text it is. &lt;/p&gt;

&lt;p&gt;The purpose of this essay is to talk about a simple and generic enough Architecture to a supervised learning text classification. The interesting point of this Architecture is that you can use it as a basic/initial model for many classifications tasks. &lt;/p&gt;

&lt;h2 id=&quot;supervised-learning&quot;&gt;Supervised Learning&lt;/h2&gt;

&lt;p&gt;If you’re already familiar with this concept, just jump this step, but I feel it’s important to beginners to know. &lt;/p&gt;

&lt;p&gt;Supervised Learning is when you have to first train your model with already existing labeled dataset, just like teaching a kid how to differentiate between a car and a motorcycle, you have to expose its differences, similarities and such. Whereas unsupervised learning is about learning and predicting without a pre-labeled dataset.&lt;/p&gt;

&lt;h2 id=&quot;starting-to-sketch-the-architecture&quot;&gt;Starting to sketch the Architecture&lt;/h2&gt;

&lt;p&gt;With the dataset in hands, we start to think about how is going to be our architecture to achieve the given goal, we can resume the steps in:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cleaning the dataset&lt;/li&gt;
  &lt;li&gt;Partitioning the dataset&lt;/li&gt;
  &lt;li&gt;Feature Engineering&lt;/li&gt;
  &lt;li&gt;Chosing the right Algorithms, Mathematical Models and Methods&lt;/li&gt;
  &lt;li&gt;Wrapping everything up&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cleaning-the-dataset&quot;&gt;Cleaning the dataset&lt;/h2&gt;

&lt;p&gt;Cleaning the dataset is a crucial initial step in Machine Learning, many Toy Datasets don’t need to be cleaned, because it’s already clean, peer-reviewed and published in a way you can use it exactly to work on the learning algorithms.&lt;/p&gt;

&lt;p&gt;The problem is: &lt;/p&gt;

&lt;h4 id=&quot;the-real-world-is-full-of-painful-and-noisy-datasets&quot;&gt;The real world is full of painful and noisy datasets&lt;/h4&gt;

&lt;p&gt;If there’s one thing I learned while working with Machine Learning is, there’s no such thing as shiny and perfect dataset in the real world, so we have to deal with this beforehand. Situations where there are many empty fields, wrong and non-homogeneous formats, broken characters, is very common. I won’t talk about such techniques now, but I will write something about it in another post.&lt;/p&gt;

&lt;h2 id=&quot;partitioning-the-dataset&quot;&gt;Partitioning the Dataset&lt;/h2&gt;

&lt;p&gt;We always need to partition the dataset in, at least, 2 partitions: the training dataset and the test/validation dataset. Why?&lt;/p&gt;

&lt;p&gt;Suppose we fed the learning algorithm with a training data X and it already known the output Y (because it’s a training data pair (X,Y)), which is, for given text X, Y is its classification, the algorithm will learn it. &lt;/p&gt;

&lt;p&gt;Great, the algorithm learned this. But now, we’re going to validate the learning, so we use the same data X, I mean, we pass X to the model and ask what’s its classification… &lt;/p&gt;

&lt;p&gt;Do you see the problem here?&lt;/p&gt;

&lt;p&gt;Of course the algorithm will output Y, the same Y we passed to its training. So, if we pass the complete dataset D in the training phase, then we validate the model using the SAME D dataset, we will be steping onto this very same situation. It’s like cheating, it’s like we point to a car and say “this is a car”, then, at the same time and with the same car, we ask to the kid “is this a car?”, it will be highly probable that the kid will answer correctly, though it may not learned correctly. What we must do is, point to a car and say “this is a car”, and then, point to a different car and ask “is this a car?”.&lt;/p&gt;

&lt;p&gt;Stepping out of the metaphor, we must check if the machine learned correctly by using a diferent portion of the dataset.&lt;/p&gt;

&lt;p&gt;So, at the end of this step, we’ll have the training dataset and the test dataset, both are subset of the same initial dataset. &lt;/p&gt;

&lt;p&gt;With Python’s Scikit Learn you can do this easily using &lt;a href=&quot;http://scikit-learn.org/stable/modules/generated/sklearn.cross_validation.train_test_split.html&quot; target=&quot;_blank&quot;&gt;Train Test Split&lt;/a&gt; &lt;em&gt;(read the docs, it’s very simple to use it.)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;imgcenter&quot;&gt;
&lt;img src=&quot;/content/images/images/ml1.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;feature-engineering&quot;&gt;Feature Engineering&lt;/h2&gt;

&lt;p&gt;This is one of the most important steps when doing Machine Learning. Briefly, Features are the data that the learning algorithm will use as the “X”, which will be used to compute and understand the patterns. A simpler example would be a non-text classification or a regression, e.g: house pricing predictions, where our Features could be: number of rooms, size in squared meters, location and more. As you can see, these feature will describe the patterns of each data point and will affect how the house will be priced. &lt;/p&gt;

&lt;p&gt;The crucial point is, features can vary, you can identify new features that can level up your model’s predictions in huge proportions, a simple example would be, in a text classification you count the frequency of each word, this is one feature… you feed your learning algorithm with it… and the result isn’t enough: 50% of precision. But then you see that, in this case, the length of the whole data point (the text) plays a huge role determining a pattern for each class. Now that you &lt;strong&gt;identified&lt;/strong&gt; this feature, you do something to &lt;strong&gt;extract&lt;/strong&gt; that feature and then add this new feature and feed your learning algorithm with it, then, the result: 95% of precision. &lt;/p&gt;

&lt;p&gt;Ok, so you know the importance of the feature engineering phase, now it’s time to understand the most common technique to extract feature in texts: &lt;strong&gt;TF-IDF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&quot;tf-idf&quot;&gt;TF-IDF&lt;/h4&gt;

&lt;p&gt;Though the most intuitive way to look for patterns in texts is to count each word in the text (and use it as a Feature), it may not be the best way to do it. A few reasons for it is, larger texts will have higher averages than the shorter texts, these discrepancies can hurt the learning algorithm, and this Feature &lt;strong&gt;doesn’t say much about the importance of the words&lt;/strong&gt;, which is very important to find patterns.&lt;/p&gt;

&lt;p&gt;So, instead of computing the occurrence, it’s better to compute the importance of the words. to accomplish this we can use 2 statistic’s techniques:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TF&lt;/strong&gt; - which is basically the raw frequency of the word given the document, raw frequency of t by f(t,d), then the simple tf scheme is tf(t,d) = f(t,d).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IDF&lt;/strong&gt; - Inverse Document Frequency, which is a technique to give emphasis to words that &lt;em&gt;don’t appear with high frequency&lt;/em&gt;, because these are the words that can differentiate the texts, which means, in this case, these are the most important words, so we inverse its frequencies. So, an example, if the word &lt;em&gt;“the”&lt;/em&gt; happens to appear very often in a text, it will weight &lt;strong&gt;less&lt;/strong&gt;, because it’s a common word, thus, don’t cause very impact when fiding patterns to differentiate the texts.&lt;/p&gt;

&lt;p&gt;So the whole TF-IDF can be computed by&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/math/e/8/1/e81492e44713270fd230d821ccebd100.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scikit Learn gives us a great API to use the TF-IDF method, it’s really simple. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    from sklearn.feature_extraction.text import TfidfVectorizer

    vectorizer = TfidfVectorizer()
    vectorized_x = vectorizer.fit_transform(X)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will do the TF-IDF on the X data, and then vectorize this data, in other words, transform the whole thing into an array of inverse frequencies.
So, extracting those features, &lt;strong&gt;this&lt;/strong&gt; will be our training and test data, that will feed the algorithm (along with the Y, which is the output, the class of each training data).&lt;/p&gt;

&lt;p&gt;Re-thinking our Architecture, now we have:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;imgcenter&quot;&gt;
&lt;img src=&quot;/content/images/images/ml2.svg&quot; /&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Remembering that X is the set of features (e.g: vector with the TF-IDF of each data point) and Y is the output, which is, the labels/class (e.g: Spam or not-spam).&lt;/p&gt;

&lt;h2 id=&quot;chosing-the-right-algorithms-mathematical-models-and-methods&quot;&gt;Chosing the right Algorithms, Mathematical Models and Methods&lt;/h2&gt;

&lt;p&gt;With the data prepared, features selected and extracted, it’s time to feed the algorithm with this data, this topic &lt;em&gt;per se&lt;/em&gt; could go pages and pages, as learning algorithms is such a huge fields, with many publications and ideas to solve every kind of problem.&lt;/p&gt;

&lt;p&gt;To not extend it very much, and as the purpose of this essay is to discuss the architecture, I’ll use a few commons algorithms, such as Logistic Regression, Decision Trees, SVM and Neural Networks.&lt;/p&gt;

&lt;p&gt;So, at this point, we’ll treat the learning algorithm as a black-box algorithm, where it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;receive a training data X which is a vector of features, and training data Y, which is the label/class/output (we can binarize it, such as spam=1, ham=0)&lt;/li&gt;
  &lt;li&gt;return a model, where given an text X, can output its predicted class Y.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After generating this model, we will test it with our test dataset and check its performance, if it can predict correctly &lt;em&gt;(the test dataset has output values (Y) so we can check them)&lt;/em&gt;, it is ready to predict new data &lt;em&gt;(data completely outside our initial dataset)&lt;/em&gt;, so we say that the machine learned the task. &lt;/p&gt;

&lt;p&gt;Our architecure now:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;imgcenter&quot;&gt;
&lt;img src=&quot;/content/images/images/ml3.svg&quot; height=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;wrapping-everything-up&quot;&gt;Wrapping everything up&lt;/h2&gt;

&lt;p&gt;With this architecture, we should be able to do most of the simple text classification tasks, as the main flow is: get data, clean data, identify and extract features, train your algorithm/mathematical model of choice, validate it and then, use the generated model to do the estimations.&lt;/p&gt;

&lt;p&gt;Of course there are many improvements that can be made on this architecture and many, many, many lower level details, but you can see this architecture as a &lt;em&gt;“boilerplate code”&lt;/em&gt; to get you started with the machine learning engineering task.&lt;/p&gt;

&lt;p&gt;A few tips:&lt;/p&gt;

&lt;p&gt;Learn the underlying mathematical models of the most commons learning algorithms, this will teach you the trade offs of each one, so you can apply the correct algorithms to the given dataset and scenario. For example, SVM can be good for unbalanced dataset, but why? You gotta know this. Neural Networks can be slow to be trained, but, if training time is not critical, it’s okay to use Neural Networks.&lt;/p&gt;

&lt;p&gt;Master the skills to clean data, if using Python, learn to use Pandas. This will be an extremely important skill.&lt;/p&gt;

&lt;p&gt;Master the skills to understand data, this will be crucial to make you see what algorithm to use, you can’t make something learn if you don’t know about what you are teaching.&lt;/p&gt;

</description>
				<pubDate>Tue, 30 Jun 2015 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2015/06/30/A-Generic-Architecture-for-Text-Classification.html</link>
				<guid isPermaLink="true">/general/setup/demo/2015/06/30/A-Generic-Architecture-for-Text-Classification.html</guid>
			</item>
		
			<item>
				<title>Case Study: Python Performance on rotating one-dimensional vectors</title>
				<description>&lt;p&gt;I’m a big fan of a nice challenge, therefore, I like books like Programming Pearls, I like to dive into many kinds of solutions to the same problem and try to differentiate them by novelty, performance, elegance, etc… &lt;/p&gt;

&lt;p&gt;This time I was playing with a fun problem, from the column 2:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“rotate a one dimensional array of &lt;em&gt;N&lt;/em&gt; elements left by &lt;em&gt;I&lt;/em&gt; positions”. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The author says it should consume little space and time, so, there are many solutions, obviously. The fun thing is that I was doing it in Python, so you can solve it in many ways, but you can decrease the performance a lot if you choose poorly. In C we could just swap pointers in a doubly linked list, which is what happens in the real implementation of CPython.&lt;/p&gt;

&lt;p&gt;The idea that the Author exposed is pretty clever, which is based in reversing the vector only 3 times:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reverse the vector, from the first position to the &lt;em&gt;I&lt;/em&gt;-th position, where &lt;em&gt;I&lt;/em&gt; is the number of position that is wanted to move to the left&lt;/li&gt;
  &lt;li&gt;Reverse the vector, from &lt;em&gt;I&lt;/em&gt;-th + 1 position to &lt;em&gt;N&lt;/em&gt;, where &lt;em&gt;N&lt;/em&gt; is the size of this vector&lt;/li&gt;
  &lt;li&gt;Reverse the whole vector, again. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In other words, we have the vector &lt;em&gt;AB&lt;/em&gt; (Where &lt;em&gt;A&lt;/em&gt; is the first part, &lt;em&gt;B&lt;/em&gt; is the second), we reverse &lt;em&gt;A&lt;/em&gt; so we have &lt;em&gt;Ar&lt;/em&gt;, reverse &lt;em&gt;B&lt;/em&gt; so we have &lt;em&gt;Br&lt;/em&gt;, now we have &lt;em&gt;ArBr&lt;/em&gt;, then we reverse the whole thing &lt;em&gt;(ArBr)r&lt;/em&gt;, after that, we have the rotated vector. It’s quite beautiful. A picture can help the visualization:&lt;/p&gt;

&lt;div class=&quot;imgcenter&quot;&gt;
&lt;img src=&quot;/content/images/images/img1.jpeg&quot; height=&quot;450&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;here’s an example with a simple vector:&lt;/p&gt;

&lt;div class=&quot;imgcenter&quot;&gt;
&lt;img src=&quot;/content/images/images/img2.jpeg&quot; height=&quot;350&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now, searching for other approaches, I looked inside the code from CPython, and there’s a nice comment: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &quot;Conceptually, a rotate by one is equivalent to a pop on one side and an append on the other&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite elegant solution as well. So, an example:&lt;/p&gt;

&lt;div class=&quot;imgcenter&quot;&gt;
&lt;img src=&quot;/content/images/images/img4.jpeg&quot; height=&quot;350&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;And the last example I found while searching through Pythonic ways to solve this problem (Even though may not be very fast)&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
def rotate_pythonic_way(arr, i):
         return arr[i:] + arr[:i] 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which is super simple and elegant, what it’s doing is the following:&lt;/p&gt;

&lt;div class=&quot;imgcenter&quot;&gt;
&lt;img src=&quot;/content/images/images/img3.jpeg&quot; height=&quot;350&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;At first I thought this solution would be the slowest, but we’ll get to that.&lt;/p&gt;

&lt;p&gt;One thing that took my attention was the internal method to reverse a list that Python offers, there are two of them, one returns a reversed iterator and you can cast it into a list and the other reverse the exactly same list that is passed as parameter, it shouldn’t take you long to realize which is faster. So I wrote a code with the many solutions to it and I profiled the functions, which gave us a interesting result when ran over a vector with 10 millions integers.&lt;/p&gt;

&lt;p&gt;First, the original idea (&lt;em&gt;reverse the vector 3 times&lt;/em&gt;), but using the reversed(array) method:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
def rotate_original_solution_with_reversed(arr, i):
    n = len(arr)
    array_A_reversed = list(reversed(arr[0:i]))
    array_B_reversed = list(reversed(arr[i:n]))
    ArBr = array_A_reversed + array_B_reversed
    rotated_array = list(reversed(ArBr))
    return rotated_array
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;and the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Original Idea using reversed(arr): 

    4 function calls in 0.611 seconds

    Ordered by: standard name

    ncalls tottime percall cumtime percall filename:lineno(function)
    1 0.440 0.440 0.440 0.440 2_1b.py:21(rotate_original_solution_with_reversed)
    1 0.171 0.171 0.611 0.611 string:1 module
    1 0.000 0.000 0.000 0.000 {len}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;damn-06s-thats-too-slow&quot;&gt;Damn, 0.6s, that’s too slow!&lt;/h4&gt;

&lt;p&gt;After this one, I changed the way I was reversing the vector, using the other internal method from Python:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
def rotate_original_solution_with_reverse(arr, i):
    n = len(arr)
    
    array_A = arr[0:i]
    array_B = arr[i:n]
    
    array_A.reverse()
    array_B.reverse()

    ArBr = array_A + array_B
    ArBr.reverse()
    return ArBr
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Original Idea using arr.reversed(): 
    7 function calls in 0.322 seconds

    Ordered by: standard name

    ncalls tottime percall cumtime percall filename:lineno(function)
    1 0.187 0.187 0.210 0.210 2_1b.py:30(rotate_original_solution_with_reverse)
    1 0.113 0.113 0.322 0.322 string:1 module
    1 0.000 0.000 0.000 0.000 {len}
    1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects}
    3 0.023 0.008 0.023 0.008 {method 'reverse' of 'list' objects}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;from-06s-to-03s-thats-a-great-improvement-lesson-choose-your-built-insdata-structuresalgorithms-carefully&quot;&gt;From 0.6s to 0.3s, that’s a great improvement. lesson: choose your built-ins/Data Structures/Algorithms carefully.&lt;/h4&gt;

&lt;p&gt;And now, using the Pythonic Way, which I was thinking that would be the slowest:&lt;/p&gt;

&lt;p&gt;And the result:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;
Pythonic Way: 

3 function calls in 0.295 seconds

Ordered by: standard name

ncalls tottime percall cumtime percall filename:lineno(function)
1 0.238 0.238 0.238 0.238 2_1b.py:45(rotate_pythonic_way)
1 0.056 0.056 0.295 0.295 string:1(module)
1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects}

&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;It was faster than the other methods! Well played, Python. &lt;/p&gt;

&lt;p&gt;And the last one, using the pop/append technique, repeated i times:&lt;/p&gt;

&lt;p&gt;And the result:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;

Pop and append way: 

5 function calls in 0.013 seconds

Ordered by: standard name

ncalls tottime percall cumtime percall filename:lineno(function)
1 0.000 0.000 0.013 0.013 2_1b.py:49(rotate_pop_append)
1 0.000 0.000 0.013 0.013 string:1(module)
1 0.000 0.000 0.000 0.000 {method 'append' of 'list' objects}
1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects}
1 0.013 0.013 0.013 0.013 {method 'pop' of 'list' objects}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Ok. That was weird. 0.013 seconds?  13 milliseconds? Crazy, right? I thought the fact of repeating it many times would make it go way slower, but I guess I was wrong!&lt;/p&gt;

&lt;p&gt;So, as you can see, an interesting problem can have many solutions, one more elegant, others faster. In the end you may pick the simplest and most intuitive solution, this may be the best for the situation. Some times you gotta go with the strangest and most non-intuitive solution (which reminds me the first time I saw the Quick Sort and all its non-intuitive way to think)&lt;/p&gt;

&lt;p&gt;So, if you’re willing to reverse a list with Python, go with List.reverse() method (unless you want the iterators to do something), and if you want to rotate a vector, go with pop/append, it looks faster.&lt;/p&gt;
</description>
				<pubDate>Fri, 19 Jun 2015 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2015/06/19/Case-Study:-Python-Performance-on-rotating-one-dimensional-vector.html</link>
				<guid isPermaLink="true">/general/setup/demo/2015/06/19/Case-Study:-Python-Performance-on-rotating-one-dimensional-vector.html</guid>
			</item>
		
			<item>
				<title>Web Scaling - using Redis as Cache</title>
				<description>&lt;p&gt;&lt;strong&gt;Redis is such a great technology.&lt;/strong&gt; Unfortunately, there’s still people who don’t know Redis or don’t know that Redis can be used as a Cache System to improve the speed of responses.&lt;/p&gt;

&lt;h2 id=&quot;why-redis&quot;&gt;Why Redis&lt;/h2&gt;

&lt;p&gt;Well, let’s start this discussion remembering how a common Relational Database basically works: Suppose we’re using a MySQL, every time your app sends a request to the MySQL client, the MySQL client gotta make a trip to the hard drive to get the data asked in the request, this can become a problem if the data asked in request is big… and if there are many requests at the same time, this can generate a huge latency, annoying users or worse.&lt;/p&gt;

&lt;p&gt;This is where Redis comes into play, Redis is a key-value database that will be running and storing data inside your memory, if you remember the basic of computers architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/memchart.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s way faster to access data in memory (Physical RAM, main memory) than to access data in the Hard Drive, so it’s easy to notice that if the data that the application wants to access is inside the main memory, it’s way easier to reach to that data than if it was stored in the Hard Drive.&lt;/p&gt;

&lt;p&gt;So, like I said, Redis will be storing its data inside the memory, but you may ask yourself: “but what if I turn off the machine?? isn’t the ram memory volatile? “ Yes, that’s why Redis will be flushing the data to the hard drive from time to time, it’s up to you to choose this time between flushes, it’s all about Performance vs. Security.&lt;/p&gt;

&lt;p&gt;So, What we’ll be doing is just:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/atv1.png&quot; width=&quot;350&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;note that this print is taken from a talk I gave in my country, so it’s in portuguese. aplicação = application, Não acha key = key don’t found, retorna dados = return data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As you can see: So much win. We avoided redundant trips to the disk.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we understand the concept of what we’ll be doing, the code becomes very easy to implement, here’s a simple idea &lt;em&gt;(thougt it can be improved and extended in many ways, but it can demonstrate the idea we’re working here)&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
    from flask import Flask
    from flask.ext.sqlalchemy import SQLAlchemy
    from sqlalchemy import create_engine
    import redis

    app = Flask(__name__)
    url = 'mysql+pymysql://username:password@ip/dbname'
    app.config['SQLALCHEMY_DATABASE_URI'] = url
    db = SQLAlchemy(app)
    cache = redis.StrictRedis(host='localhost', port=6379, db=0)

    #improvement: model could stay in a different file
    class User(db.Model):
        id = db.Column(db.Integer, primary_key=True)
        username = db.Column(db.String(80))
        email = db.Column(db.String(120))

        def __init__(self, username, email):
            self.username = username
            self.email = email

        def __repr__(self):
            return '' % self.username

    def createUsers():
            for x in xrange(0,100000):
                user = User('test', 'test')
                db.session.add(user)
            db.session.commit()

    def getUsers():
            users = cache.get('users')
            if not users:
                users = User.query.all()
                cache.set('users', users)

    # improvement: views/routing should stay in a different file
    @app.route('/')
    def hello_world():
        getUsers()
        return 'Hello Worldd!'

    if __name__ == '__main__':
        app.debug=True
        app.run(host='0.0.0.0')
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;So, after you create the correct database, populate the database (there’s a function in the code for that) and change username/password/dbname in the code, we’ll run the app.py and go to localhost:port-you-exposed.&lt;/p&gt;

&lt;h2 id=&quot;what-will-happen&quot;&gt;&lt;em&gt;What will happen?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;1. The first time you access it, it will take a few seconds to get the data from the MySQL&lt;/p&gt;

&lt;p&gt;2. The second time you access it, it will take just a few milliseconds to get the same data from redis&lt;/p&gt;

&lt;p&gt;In my computer the result was:&lt;/p&gt;

&lt;p&gt;first access: 45861 milliseconds&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;second access: 5ms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I know, right? That’s just blazing fast!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And it can save a lot of computational resources and human time. Now, with this logic applied to one method (the method to get users), we can apply it to whichever method we want, or we can even create a generic decorator and annotate the methods that we want do the caching!!&lt;/p&gt;
</description>
				<pubDate>Mon, 25 May 2015 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2015/05/25/Web-Scaling:-Using-Redis-as-Cache.html</link>
				<guid isPermaLink="true">/general/setup/demo/2015/05/25/Web-Scaling:-Using-Redis-as-Cache.html</guid>
			</item>
		
			<item>
				<title>Building your first REST API with Python</title>
				<description>&lt;p&gt;Are you total lost in this world full of jargons like: API, Rest API, microservices and stuffs? Come here, sit, grab a cup of coffee, and let’s talk briefly about it.&lt;/p&gt;

&lt;p&gt;Today a lot is said about APIs. Everything has an API, every programmer (newbie to expert) uses tons of API. Also, today we can see a lot of people talking about microservices and the idea of total separation of backend, frontend, web services or &lt;em&gt;whatever&lt;/em&gt;. So we can &lt;em&gt;(and we do)&lt;/em&gt; hear a lot about REST/RESTful APIs. We have 3 current problems with it:&lt;/p&gt;

&lt;p&gt;1. Many new programmers don’t have a single clue of what a Rest API is.&lt;/p&gt;

&lt;p&gt;2. It’s probable that they’re using Rest APIs and don’t know about it.&lt;/p&gt;

&lt;p&gt;3. When they feel that they should learn more about it, there’s hardly any good and accessible material to learn it.&lt;/p&gt;

&lt;h3 id=&quot;so-heres-a-extremely-simplistic-approach-to-try-to-explain-what-is-a-rest-api&quot;&gt;So here’s a extremely simplistic approach to try to explain what is a Rest API&lt;/h3&gt;

&lt;p&gt;Starting with the concept of API, which stands for &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface, it’s just an interface which you, &lt;em&gt;dear programmer&lt;/em&gt;, will be dealing with to extract whatever you &lt;em&gt;(or your program)&lt;/em&gt; want.&lt;/p&gt;

&lt;p&gt;Suppose your program needs to create a connection with a given database, normally you do:&lt;/p&gt;

&lt;p&gt;1. You import the &lt;em&gt;library&lt;/em&gt; that will abstract the connection with the database&lt;/p&gt;

&lt;p&gt;2. You create an object to represent a Connection with the database&lt;/p&gt;

&lt;p&gt;3. You call functions that this object provide to you, so you can do whatever you want (and whatever they provide)&lt;/p&gt;

&lt;p&gt;Here’s a silly example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from database_library import Connection

connection = Connection()
connection.OpenConnection()
… do whatever you want
connection.CloseConnection()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you called those function, you were dealing with the interface that the object provided to you, sure the object may be doing thousand of things at the moment you call its functions, but, it doesn’t matter to you, does it? You just want the &lt;em&gt;damn&lt;/em&gt; connection open and then closed.&lt;/p&gt;

&lt;p&gt;So the library that you imported is giving you something you want, offering a service or a resource. That’s the sole purpose of an API. It’s a layer that you can use to get things from other(s) component(s).&lt;/p&gt;

&lt;p&gt;So, it’s easy to deduct that, the better the engineer planned the API, the easier it will be to deal with and extract what you want, and the contrary is true.&lt;/p&gt;

&lt;p&gt;But still, you’re processing the core of this API in your own machine, which isn’t that great, here’s when the API evolves to whole web hosted services, so you can request this API something, and this API can give you something, through the WEB, via HTTP request. And that’s amazing.&lt;/p&gt;

&lt;p&gt;And the community, recently, decided that the request and response that happen between applications and APIs, should be done with JSON, so this communication can become uniform and APIs can talk to other APIs effortlessly.&lt;/p&gt;

&lt;p&gt;So, basically, what’s going on is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/json-rest3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So… yes, you make your function calls, now, with just a simple URL + HTTP methods, wanna see a real example? We can just send a request to the Facebook’s API by accessing this URL: &lt;a href=&quot;http://graph.facebook.com/contatodigo&quot;&gt;http://graph.facebook.com/contatodigo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which will request my profile’s data, and the Facebook’s API will return:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
   &quot;id&quot;: &quot;100001638888259&quot;,
   &quot;first_name&quot;: &quot;Rodrigo&quot;,
   &quot;gender&quot;: &quot;male&quot;,
   &quot;last_name&quot;: &quot;Ara\u00fajo&quot;,
   &quot;link&quot;: &quot;https://www.facebook.com/contatodigo&quot;,
   &quot;locale&quot;: &quot;pt_BR&quot;,
   &quot;name&quot;: &quot;Rodrigo Ara\u00fajo&quot;,
   &quot;username&quot;: &quot;contatodigo&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As simple as that.&lt;/p&gt;

&lt;p&gt;Now with this basic idea explained, we can do a simple Rest API using Python and Flask. (I’m assuming you’re already familiar with both technologies).&lt;/p&gt;

&lt;p&gt;All we’re gonna do is, using the flask routing, create routes to the users so they can interact with the resources of our API. Let’s suppose our API will serve and receive only Books. So this is the resource we’re dealing with, users may use our API to get Books and insert new Books, so our only URIs will be:&lt;/p&gt;

&lt;p&gt;1. &lt;em&gt;/bookapi/v1.0/books&lt;/em&gt; with a GET method, which will just return the list of books&lt;/p&gt;

&lt;p&gt;2. &lt;em&gt;/bookapi/v1.0/books&lt;/em&gt; with a POST method, which will insert a book&lt;/p&gt;

&lt;p&gt;So after the API is built, you or you program can get books or insert books by sending HTTP request to the API’s URIs, simple as that. I’ll be very straight forward, here’s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!flask/bin/python
from flask import Flask, jsonify, request

app = Flask(__name__)

books = [
    {
        'id': 1,
        'title': u'Game of Thrones',
        'description': u'Cool dragons', 
        'finished': False
    },
    {
        'id': 2,
        'title': u'50 shadows of grey',
        'description': u'It start as bullshit, end as a huge bullshit', 
        'finished': True
    }
]

@app.route('/bookapi/v1.0/books/', methods=['GET'])
def get_books():
    return jsonify({'books': books})

@app.route('/bookapi/v1.0/books', methods=['POST'])
def create_book():
    if not request.json or not 'title' in request.json:
        abort(404)

    book = {
            'id': books[-1]['id'] + 1,
            'title': request.json['title'],
            'description': request.json.get('description', &quot;&quot;),
            'finished': False
            }

    books.append(book)
    return jsonify({'book': book}), 201 

if __name__ == '__main__':
    app.run(debug=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we’re creating a simple in-memory &lt;em&gt;database&lt;/em&gt;, which is a simple python’s dict. This could be a database. But for the sake of simplicity, I’m using just a dict.&lt;/p&gt;

&lt;p&gt;When the requests come, it verifies the route that the user is asking for, which is: what resources is he/she wanting? and then, the code do whatever it must do (&lt;em&gt;remember the API idea of hiding the complexity, the user requesting just want the result&lt;/em&gt;), and then it put everything in a JSON and returns it. That simple!&lt;/p&gt;

&lt;p&gt;Of course, many improvements and extensions (&lt;em&gt;there are infinity possibilities&lt;/em&gt;) can be made to this code, but, here’s a skeleton of the idea of an API, it’s just a start. One good practice it’s to &lt;em&gt;not&lt;/em&gt; return the ID of the resource, but return just its URI, which is surely a great idea. Another good practice is to ask authentication in every HTTP request, so your API won’t be exposed to everybody. There are, indeed, endless improvements, but in this code, you, that are completely beginner to the API’s concept, can now understand what’s going on underneath and start planning and building your own API using Flask.&lt;/p&gt;
</description>
				<pubDate>Wed, 22 Apr 2015 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2015/04/22/Build-your-first-Rest-API-with-Python.html</link>
				<guid isPermaLink="true">/general/setup/demo/2015/04/22/Build-your-first-Rest-API-with-Python.html</guid>
			</item>
		
			<item>
				<title>Using Python and AI to predict types of wine</title>
				<description>&lt;p&gt;I’ve been working with AI/Machine Learning at &lt;a href=&quot;http://www.jusbrasil.com.br/&quot;&gt;Jusbrasil&lt;/a&gt; recently, and it’s being pretty challenging due to the &lt;em&gt;huge&lt;/em&gt; amount of data that we have to deal with, so cleaning this data and making predictions and classifications in an acceptable time demands a nice AI architecture.&lt;/p&gt;

&lt;p&gt;That said I can say that I’m extremely thankful for a few technologies that are helping me go through this challenge &lt;em&gt;(and the pain of cleaning this amount of data)&lt;/em&gt;: Python, Scikit Learn, Pandas, and the whole stack that the Scikit Learn use, such as NumPy, SciPy, matplotlib and few others.&lt;/p&gt;

&lt;p&gt;So, this inspired me to &lt;em&gt;spread the word&lt;/em&gt;, so I’ll be showing here a simple example of Machine Learning using Python, Pandas and Scikit Learn to predict, given a great amount of data/features about wines, if a wine is white or red.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;disclaimer:&lt;/strong&gt; &lt;em&gt;I’m assuming that you already have a small knowledge on the ideas of the machine learning and its mathematical aspects (although not necessary to implement the code that I’ll show here), this is just a simple introduction to scikit learn and its power, so the example is pretty simple and straight forward, if you just want the code, here it is: &lt;a href=&quot;https://gist.github.com/digorithm/ad742f9314f76e732888&quot;&gt;github link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-pandas&quot;&gt;What’s Pandas?&lt;/h2&gt;

&lt;p&gt;Pandas is an amazing library for data manipulation, it makes the process of dealing with data very easy and straight forward, we can work with CSV, JSON and plenty other formats without struggling to manipulate the data, &lt;a href=&quot;https://signalvnoise.com/posts/3124-give-it-five-minutes&quot;&gt;give it five minutes&lt;/a&gt; and skim their &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/dev/&quot;&gt;docs&lt;/a&gt;, it will definitely worth it!&lt;/p&gt;

&lt;h2 id=&quot;fetching-the-data&quot;&gt;Fetching the data&lt;/h2&gt;

&lt;p&gt;Let’s start fetching the data with Pandas, &lt;em&gt;(you can download the data &lt;a href=&quot;https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/&quot;&gt;here&lt;/a&gt;)&lt;/em&gt; to do so, just import Pandas and read the CSV file, just like that:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
import pandas as pd
reds = pd.read_csv('winequality-red.csv', sep=';')
whites = pd.read_csv('winequality-white.csv', sep=';')
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;We can see how the data is structured by doing a few commands:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
reds.values[0:6]
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;As output, we have the first 5 rows of the red wine’s data&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
array([[7.4, 0.7, 0.0, 1.9, 0.076, 11.0, 34.0, 0.9978, 3.51, 0.56, 9.4, 5],
       [7.8, 0.88, 0.0, 2.6, 0.098, 25.0, 67.0, 0.9968, 3.2, 0.68, 9.8, 5],
       [7.8, 0.76, 0.04, 2.3, 0.092, 15.0, 54.0, 0.997, 3.26, 0.65, 9.8, 5],
       [11.2, 0.28, 0.56, 1.9, 0.075, 17.0, 60.0, 0.998, 3.16, 0.58, 9.8,6],
       [7.4, 0.7, 0.0, 1.9, 0.076, 11.0, 34.0, 0.9978, 3.51, 0.56, 9.4, 5],
       [7.4, 0.66, 0.0, 1.8, 0.075, 13.0, 40.0, 0.9978, 3.51, 0.56, 9.4, 5]], 
dtype=object)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Or we just use a function from Pandas that describe very well our data&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
reds.head()
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;

&amp;lt;class 'pandas.core.frame.dataframe'=&quot;&quot;&amp;gt;Int64Index: 5 entries, 0 to 4
Data columns:
fixed acidity           5  non-null values
volatile acidity        5  non-null values
citric acid             5  non-null values
residual sugar          5  non-null values
chlorides               5  non-null values
free sulfur dioxide     5  non-null values
total sulfur dioxide    5  non-null values
density                 5  non-null values
pH                      5  non-null values
sulphates               5  non-null values
alcohol                 5  non-null values
quality                 5  non-null values
dtypes: float64(11), int64(1), object(1)
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;understanding-our-data&quot;&gt;Understanding our data&lt;/h2&gt;

&lt;p&gt;Matplotlib gives you many ways to plot our data into graphs so we can understand what is going on with the data so we can choose the best model/algorithm for the given scenario,&lt;/p&gt;

&lt;p&gt;For instance, let’s take a look at the relation between the red wines and its fixed acidity&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
x = plt.subplots(figsize=(10, 5))
plt.plot(reds.index, reds.get(&quot;fixed acidity&quot;), 'ro')
ax.set_title('Wines vs fixed acidity')
ax.set_xlabel('red wine index')
ax.set_ylabel('Fixed Acidity')
plt.show()
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/mlproblem.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-data-for-classification&quot;&gt;Preparing the Data for classification&lt;/h2&gt;

&lt;p&gt;Now we’re going to add a new feature/variable to our data, which is our target variable, the &lt;em&gt;Y&lt;/em&gt;, that will be telling if the wine from our dataset is white or red&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
reds['kind'] = 'red'
whites['kind'] = 'white'
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;We need to get all of our feature into a vector called X, that will be set into our algorithm, right? And, we need to get all our targets (white or red) and set into a Y variable&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
wines = reds.append(whites, ignore_index=True)
X = wines.ix[:, 0:-1]
y = wines.kind
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Notice that we’re merging both datasets together, the one with the red wines and the one with the white wines, so we can send them together to the algorithm. Now we’re going to binarize the labels ‘white’ and ‘red’, so the mathematical model can use it. It’s pretty simple&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
y = y.apply(lambda val: 0 if val == 'white' else 1)
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;the-algorithm&quot;&gt;The algorithm&lt;/h2&gt;

&lt;p&gt;Now that we have our data well structured and we do understand it, we can start looking for an algorithm to use. A good algorithm for our scenario is a simple &lt;strong&gt;Logistic Regression&lt;/strong&gt;, that will return a model that we’ll use to make our predictions/classification. The mathematical linear model that will use is the following:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
 
f(w) := \lambda\, R(w) + \frac1n \sum_{i=1}^n L(w;x_i,y_i) \label{eq:regPrimal}\

&lt;/script&gt;

&lt;p&gt;In addition with the loss function defined by the logistic loss&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
L(w;x,y) := \log(1+\exp( -y w^T x )) 
&lt;/script&gt;

&lt;p&gt;The Scikit learn provides an awesome library with an amazingly ease of use, so that we don’t have to implement the whole model from scratch. All we have to do is create a object from the model we want to use, understand how it works &lt;em&gt;(at least understand how to use its interface to do what we want)&lt;/em&gt;. In this case, we will be using the &lt;em&gt;cross validation&lt;/em&gt; object, which is another discussion for another time, but in a few words, it will divide our dataset and test it against all parts of the divided dataset, this way we make sure that we’re validating the quality of the result.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
clf = LogisticRegression()
scores = cross_val_score(clf, X, y, cv=5)
print scores.mean(), scores.std()
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And as the result we get:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;python hljs&quot;&gt;
0.981376321334 0.00638795038332
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And that’s the exactly the precision of the algorithm over the given dataset, &lt;strong&gt;98% of precision&lt;/strong&gt;, which is quite good! Now, for example, we can save this trained classifier and use it for future classifications of incoming data about wines that need to be classified as white or red, to do so, we just call the method &lt;em&gt;clf.predict(X)&lt;/em&gt; where this X will be the new wine’s data. simplicity at its best!&lt;/p&gt;
</description>
				<pubDate>Tue, 31 Mar 2015 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2015/03/31/using-python-and-AI-to-predict-types-of-wine.html</link>
				<guid isPermaLink="true">/general/setup/demo/2015/03/31/using-python-and-AI-to-predict-types-of-wine.html</guid>
			</item>
		
			<item>
				<title>Making your machine think, learn and predict - Gradient Descent Algorithm in Java</title>
				<description>&lt;h2 id=&quot;how-can-we-make-a-machine-learn-from-data&quot;&gt;How can we make a machine learn from data?&lt;/h2&gt;

&lt;p&gt;Then, how can we make the machine predicts things based on that learned data? Those are the question answered by one of the most classic Machine Learning Algorithms, the &lt;strong&gt;Gradient Descent Algorithm&lt;/strong&gt;, from a Mathematical-Statistical side it’s called &lt;strong&gt;Univariate Linear Regression&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is one of the tools of the Machine Learning toolbox, and what it tries to do is to model a relationship between a scalar dependent variable Y and a explanatory variable X.&lt;/p&gt;

&lt;h2 id=&quot;in-laymans-term&quot;&gt;In Layman’s term…&lt;/h2&gt;

&lt;p&gt;Let’s suppose you have a few points distributed in a Graph, so you already know that in a point A you have a well defined X and Y, which means, if you input X, your output will be Y, and in a point B you have a well defined X’ and Y’ as well. But, thing is, if a point emerge between A and B, and you only have the X… what will be the Y &lt;em&gt;(the output)&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;What this algorithm does is: &lt;strong&gt;It tries to predict this Y value, based on the previous data&lt;/strong&gt;! Amazing, right?&lt;/p&gt;

&lt;p&gt;At the end of the execution, you’ll have a full trend line that you can use to predict values! just like the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/linearRegression.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-theory-behind-it&quot;&gt;The Theory Behind It&lt;/h2&gt;

&lt;p&gt;I’ll cover a few theories about this algorithm here, but, it won’t be complete, as this demand a great coverage of mathematical material that if I would write it all here, It would be a &lt;em&gt;long, long&lt;/em&gt;, &lt;strong&gt;very&lt;/strong&gt; &lt;em&gt;long&lt;/em&gt; post. So I’m assuming that you’re already familiar with Calculus &lt;em&gt;(Sums, Partial Derivatives)&lt;/em&gt;, Statistics and Discrete Mathematics.&lt;/p&gt;

&lt;p&gt;So, our goal here is to &lt;strong&gt;fit the best straight line in our initial data&lt;/strong&gt;, right?&lt;/p&gt;

&lt;p&gt;Thus, we need something to represent this straight line, which will be our hypothesis function:&lt;/p&gt;

&lt;div id=&quot;math&quot;&gt; 
$ h_{\Theta}(x) = \Theta_{0} + \Theta_{1}x $ 
&lt;/div&gt;

&lt;p&gt;Where this \( \Theta_{0} \) and \( \Theta_{1} \) are the parameters of the function, and &lt;strong&gt;finding the best parameters for this function is what is going to give us the correct straight line to plot on our data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example of what we’re trying to do, which is, fit the best straight line in the data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/Linear-regression.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So what we want to do is to find a \( \Theta_{0} \) and \( \Theta_{1} \) so our Hypothesis outputs can be very close to the real Y output.&lt;/p&gt;

&lt;p&gt;Formally we want:&lt;/p&gt;

&lt;div id=&quot;math&quot;&gt;$ \underset{\Theta_{0}\Theta_{1}}{min}(h_{\Theta}(x) - y)^2 $&lt;/div&gt;

&lt;p&gt;So we want &lt;strong&gt;minimize&lt;/strong&gt; \( \Theta_{0} \) and \( \Theta_{1} \) so the difference between the &lt;strong&gt;Hypothesis&lt;/strong&gt; and the &lt;strong&gt;real output&lt;/strong&gt; is minimal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But we want it for every point in our data&lt;/strong&gt;, which is \(x(i)\) &lt;em&gt;(which is the i-th x of our data)&lt;/em&gt;, so we want the &lt;strong&gt;sum of this average&lt;/strong&gt;, which is, formally:&lt;/p&gt;

&lt;div id=&quot;math&quot;&gt; 
$ \underset{\Theta_{0}\Theta_{1}}{min}\,\frac{1}{2m} \sum_{i=1}^{m} (h_{0}(x^{(i)}) - y^{(i)})^2 $
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And we’re going to call this function &lt;strong&gt;Cost Function&lt;/strong&gt;, with the following notation:&lt;/p&gt;

&lt;div id=&quot;math&quot;&gt; 
$ J(\Theta_{0}, \Theta_{1}) = \,\frac{1}{2m} \sum_{i=1}^{m} (h_{0}(x^{(i)}) - y^{(i)})^2 $
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So, our goals is to &lt;strong&gt;minimize this cost function&lt;/strong&gt;:&lt;/p&gt;

&lt;div id=&quot;math&quot;&gt; 
$ \underset{\Theta_{0}\Theta_{1}}{min}\,\, J(\Theta_{0}, \Theta_{1}) $
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This cost function is also called &lt;a href=&quot;http://en.wikipedia.org/wiki/Mean_squared_error&quot;&gt;Square Error Function&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;now-the-gradient-descent-algorithm&quot;&gt;Now, the gradient descent algorithm&lt;/h3&gt;

&lt;p&gt;With our cost function built, we need to “keep” finding values for \( \Theta_{0} \) and \( \Theta_{1} \) so we can reach our ideal trend line. So, basically:&lt;/p&gt;

&lt;p&gt;1. We start with some \( \Theta_{0} \) and \( \Theta_{1} \)&lt;/p&gt;

&lt;p&gt;2. keep changing \( \Theta_{0} \) and \( \Theta_{1} \) to reduce our cost function \( J(\Theta_{0}, \Theta_{1}) \), until we find the minimum.&lt;/p&gt;

&lt;p&gt;That’s quite simple and intuitive, right? There’s a lot of intuitive explanation and more visual examples of what this algorithm is doing in the &lt;a href=&quot;https://class.coursera.org/ml-007/&quot;&gt;machine learning course taught by Andrews Ng (From Stanford)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What this algorithm will be doing is: partially derive our cost function for \( \Theta_{0} \) and \( \Theta_{1} \) simultaneously, so we can find the minimum value for them, with every iteration updating our \( \Theta_{0} \) and \( \Theta_{1} \) with their new value!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;- Meh, talk is cheap show me the math!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Formally, the algorithm is:&lt;/p&gt;

&lt;div id=&quot;math&quot;&gt;
$ repeat \, until \, convergence\,\{ \\ \,\,\,\,\,\,\,\,\,\,\,\, \Theta_{j} := \Theta_{j} - \alpha \frac{\partial }{\partial \Theta_{j}} \,\, J(\Theta_{0}, \Theta_{1}) \\ \} \,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\, $
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Make sure that this will run for j = 0 and j = 1.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But, pay attention, this is the generic version, the \( \Theta_{j} \) represent both \( \Theta_{0} \) and \( \Theta_{1} \).&lt;/p&gt;

&lt;p&gt;What the algorithm is saying is that we’ll be doing this procedure to \( \Theta_{0} \) and \( \Theta_{1} \) at the same time! So, we can put it in this way:&lt;/p&gt;

&lt;div id=&quot;math&quot;&gt;
$ repeat \, until \, convergence\,\{ \\ \Theta_{0} := \Theta_{0} - \alpha \frac{\partial }{\partial \Theta_{0}} \,\, J(\Theta_{0}, \Theta_{1}) \\ \Theta_{1} := \Theta_{1} - \alpha \frac{\partial }{\partial \Theta_{1}} \,\, J(\Theta_{0}, \Theta_{1}) \\ \} \,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\ $
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Also, we can expand the &lt;strong&gt;Cost Function&lt;/strong&gt; that is being derived, doing this, it will be exactly what I’ll be putting into code soon, so, our &lt;strong&gt;final algorithm&lt;/strong&gt; is:&lt;/p&gt;

&lt;div id=&quot;math&quot;&gt;
$ repeat \, until \, convergence\,\{ \\ \Theta_{0} := \Theta_{0} - \alpha \frac{\partial }{\partial \Theta_{0}} \,\, \Big (\frac{1}{2m} \sum_{i=1}^{m} (h_{\Theta}(x^{(i)}) - y^{(i)})^2 \Big) \\ \Theta_{1} := \Theta_{1} - \alpha \frac{\partial }{\partial \Theta_{1}} \,\, \Big (\frac{1}{2m} \sum_{i=1}^{m} (h_{\Theta}(x^{(i)}) - y^{(i)})^2 \Big) \\ \}
\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\,\ $
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now it’s time to code all of it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First things first, we’ll be using &lt;a href=&quot;http://code.google.com/p/jmathplot/&quot;&gt;Google’s JMathPlot&lt;/a&gt; to plot graphs using Java and Swing to use its JFrame, we shall start with our class to represent our &lt;strong&gt;Initial Data&lt;/strong&gt;, which will be the &lt;strong&gt;Training Set&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    import javax.swing.JFrame;
    import org.math.plot.*;

    public class InitialData{
            public static double[] x = {2, 4, 6, 8};
            public static double[] y = {2, 5, 5, 8};

            public void plotData(){
                    Plot2DPanel plot = new Plot2DPanel();
                    plot.addScatterPlot(&quot;X-Y&quot;, this.x, this.y);
                    JFrame frame = new JFrame(&quot;Original X-Y Data&quot;);
                    frame.setContentPane(plot);
                    frame.setSize(600, 600);
                    frame.setVisible(true);
            }
    }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
To try out the data plotting, create a main class and call &lt;em&gt;plotData()&lt;/em&gt; from &lt;strong&gt;InitialData.java&lt;/strong&gt;, so we can have this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/example-plot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we’re going to take our first steps on writing the &lt;strong&gt;GradientDescent.java&lt;/strong&gt;, we must be very careful here. Let’s start with the main settings and parameters of it:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    import javax.swing.JFrame;
    import org.math.plot.*;

    public class GradientDescent{
            private double theta0;
            private double theta1;

            private int trendline;

            // Algorithm settings
        double alpha = 0.01;  // learning rate
        double tol = 1e-11;   // tolerance to determine convergence
        int maxiter = 9000;   // maximum number of iterations in case convergence is not reached
        int dispiter = 100;   // interval for displaying results during iterations
        int iters = 0;

        //track of results
        double[] theta0plot = new double[maxiter+1];
        double[] theta1plot = new double[maxiter+1];
        double[] tplot = new double[maxiter+1];

        InitialData initial_data;

        Plot2DPanel plot;

        public GradientDescent(InitialData id){
                    //initial guesses
            this.theta0 = 0;
            this.theta1 = 0;
            this.initial_data = id;

            plot = new Plot2DPanel();
            plot.addScatterPlot(&quot;X-Y&quot;, initial_data.x, initial_data.y);
            JFrame frame = new JFrame(&quot;Final X-Y Data&quot;);
            frame.setContentPane(plot);
            frame.setSize(600, 600);
            frame.setVisible(true);
        }
    [...]
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now let me explain a few details of this part:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alpha&lt;/strong&gt; is the &lt;strong&gt;Learning Rate&lt;/strong&gt;, it’s a &lt;em&gt;dangerous variable&lt;/em&gt;, it’s used to set the size of the step that the algorithm will take while trying to find the \( \Theta_{0} \) and \( \Theta_{1} \), that’s the learning rate of the algorithm. If Alpha is &lt;strong&gt;too low&lt;/strong&gt;, the algorithm can be very slow, although very precise, if Alpha is &lt;strong&gt;higher&lt;/strong&gt;, it will be taking &lt;strong&gt;larger steps&lt;/strong&gt;, which can be &lt;strong&gt;faster&lt;/strong&gt;, or &lt;strong&gt;dangerous&lt;/strong&gt;, causing the algorithm to &lt;strong&gt;DIVERGE&lt;/strong&gt;, which, &lt;em&gt;trust me&lt;/em&gt;, you don’t want this! &lt;em&gt;(Andrew Ng explain this part very well in its course)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The variable &lt;strong&gt;TrendLine&lt;/strong&gt; is what we’ll use to plot the straight line which is our main goal.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;tol&lt;/strong&gt; variable is our safe move in case of a dangerous convergence, which means, in case of convergence, it will stop the execution.&lt;/p&gt;

&lt;p&gt;The other variables and objects in this part are very intuitive to understand, it’s auto explainable! &lt;em&gt;(forgive if i’m wrong, just say something and I’ll put more detail on that)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;About the Constructor, we’re saying that our initial guesses for \( \Theta_{0} \) and \( \Theta_{1} \) is 0. The rest is just data plotting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;next: our Hypothesis Function&lt;/strong&gt; &lt;em&gt;(that will be doing exactly as the model that I did show above)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    public double hypothesisFunction(double x){
            return this.theta1*x + theta0;
        }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now, our two function to derive our \( \Theta \), again, it will be doing exactly the same as the mathematical model, there’s no magic!&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    public double deriveTheta1(){
            double sum = 0;

            for (int j=0; j&amp;lt;initial_data.x.length; j++){
                    sum += (initial_data.y[j] - hypothesisFunction(initial_data.x[j])) * initial_data.x[j];
            }
            return -2 * sum / initial_data.x.length;
        }

        public double deriveTheta0(){
            double sum = 0;

            for (int j=0; j&amp;lt;initial_data.x.length; j++) {
                    sum += initial_data.y[j] - hypothesisFunction(initial_data.x[j]);
            }
            return -2 * sum / initial_data.x.length;

        }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
Now, the &lt;strong&gt;Gradient Descent Algorithm&lt;/strong&gt; &lt;em&gt;per se&lt;/em&gt;, making use of the functions above:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    public void execute(){
            do {

                    this.theta1 -= alpha * deriveTheta1();
                    this.theta0 -= alpha * deriveTheta0();

                    //used for plotting
                    tplot[iters] = iters;
                    theta0plot[iters] = theta0;
                    theta1plot[iters] = theta1;
                    iters++;

                    if (iters % dispiter == 0){
                            addTrendLine(plot, true);

                    }

                    if (iters &amp;gt; maxiter) break;
            } while (Math.abs(theta1) &amp;gt; tol || Math.abs(theta0) &amp;gt; tol);
            plot.addScatterPlot(&quot;X-Y&quot;, initial_data.x, initial_data.y);
            System.out.println(&quot;theta0 = &quot; + this.theta0 + &quot; and theta1 = &quot; + this.theta1);
        }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Note that it does &lt;em&gt;almost&lt;/em&gt; exactly the same as the mathematical model of the Gradient Descent demonstrated above, the difference is only a few details, such as the &lt;em&gt;if&lt;/em&gt; and &lt;em&gt;while&lt;/em&gt; to verify convergence or divergence &lt;em&gt;(which is, if it reached the iteration’s limit)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next we have the &lt;strong&gt;addTrendLine&lt;/strong&gt; function, used to keep plotting our straight line as it will become more updated.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    public void addTrendLine(Plot2DPanel plot, boolean removePrev){
            if (removePrev){
                    plot.removePlot(trendline);
            }
            double[] yEnd = new double[initial_data.x.length];
            for (int i=0; i&amp;lt;initial_data.x.length; i++)
                    yEnd[i] = hypothesisFunction(initial_data.x[i]);
            trendline = plot.addLinePlot(&quot;final&quot;, initial_data.x, yEnd);
        }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And now we have an extra, it’s a function to store and plot the convergence history of both \( \Theta_{0} \) and \( \Theta_{1} \), so we can see how it happened.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    public void printConvergence(){

          double[] theta0plot2 = new double[iters];
          double[] theta1plot2 = new double[iters];
          double[] tplot2 = new double[iters];
          System.arraycopy(theta0plot, 0, theta0plot2, 0, iters);
          System.arraycopy(theta1plot, 0, theta1plot2, 0, iters);
          System.arraycopy(tplot, 0, tplot2, 0, iters);

          // Plot the convergence of data
          Plot2DPanel convPlot = new Plot2DPanel();

          // add a line plot to the PlotPanel
          convPlot.addLinePlot(&quot;theta0&quot;, tplot2, theta0plot2);
          convPlot.addLinePlot(&quot;theta1&quot;, tplot2, theta1plot2);

          // put the PlotPanel in a JFrame, as a JPanel
          JFrame frame2 = new JFrame(&quot;Convergence of parameters over time&quot;);
          frame2.setContentPane(convPlot);
          frame2.setSize(600, 600);
          frame2.setVisible(true);
        }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Finally, we have our &lt;strong&gt;Test Class&lt;/strong&gt;, that will execute everything:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    import javax.swing.JFrame;

    import org.math.plot.*;

    public class TestGradDescent {
            public static void main(String[] args ){
                    InitialData id = new InitialData();
                    id.plotData();
                    GradientDescent gd = new GradientDescent(id);
                    gd.execute();
                    gd.printConvergence();

            }
    }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now, executing the code, the output will be, at first, the initial data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/example-plot-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Executing the algorithm, it learns and generate its prediction based on its initial data:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/example-plot-line-e1420763780646.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;magical-right&quot;&gt;Magical, right?&lt;/h2&gt;

&lt;p&gt;And then, we can see the &lt;strong&gt;convergence&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/example-convergence.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And you can see in the terminal the final values of \( \Theta_{0} \) and \( \Theta_{1} \) that minimized the Cost Function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If it wasn’t Science, probably would be black magic. heh.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-few-considerations&quot;&gt;A few considerations&lt;/h2&gt;

&lt;p&gt;You can download the complete code &lt;a href=&quot;https://github.com/digorithm/ArtificialIntelligenceAlgorithms&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions/suggestion, drop me an email so we can talk!&lt;/p&gt;

&lt;p&gt;If you need further details of the mathematical model, I ultra advice to watch Andrew’s Ng Videos at Stanford@Coursera. &lt;strong&gt;His skills to teach it is something unbelievable awesome&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 09 Jan 2015 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2015/01/09/Making-Your-Machine-Think-Learn-And-Predict--Gradient-Descent-Algorithm-in-Java.html</link>
				<guid isPermaLink="true">/general/setup/demo/2015/01/09/Making-Your-Machine-Think-Learn-And-Predict--Gradient-Descent-Algorithm-in-Java.html</guid>
			</item>
		
			<item>
				<title>Why, how and where to Learn Design Patterns</title>
				<description>&lt;p&gt;The first thought I had when I started to study &lt;a href=&quot;http://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;Design Patterns&lt;/a&gt; was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;- “damn, is all this really necessary?”&lt;/em&gt;	&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I mean, so many patterns, so many details to do things that look simple to do without any further detailed thoughts. And I started to question myself if this was really a productive thing. The first answer I gave was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;-”no, *wonderful not-bad-word* this, I’m losing too much time trying to wrap my head around this”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I forgot it and kept developing my software using something like &lt;a href=&quot;https://gist.github.com/banaslee/4147370#file-xgh-en-txt&quot;&gt;Extreme Go Horse&lt;/a&gt;. (i was younger at that time). Then, I saw a pattern being formed:&lt;/p&gt;

&lt;h3 id=&quot;every-time-i-came-back-to-my-old-codes-i-couldnt-extend-nor-debbug-it-in-a-easy-way-it-was-always-extremely-hard-to-work-on-it&quot;&gt;Every time I came back to my old codes I couldn’t extend nor debbug it in a easy way. It was always extremely hard to work on it.&lt;/h3&gt;

&lt;p&gt;And then I realized why: &lt;strong&gt;lack of good architectural decisions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So I decided to give another chance to learning Design Patterns and finally I understood its beauty.&lt;/p&gt;

&lt;h2 id=&quot;few-things-to-keep-in-mind&quot;&gt;Few things to keep in mind:&lt;/h2&gt;

&lt;p&gt;1. It’s not about trying to fit every problem in every Design Pattern. That’s just a waste of time&lt;/p&gt;

&lt;p&gt;2. It may be not very productive at start, the process of applying a DP in a determined problem takes time.&lt;/p&gt;

&lt;p&gt;3. On the other hand, it will be extremely productive when you try to debug your code or try to extend it. Everything starts to make more sense and it’s way easier to change things when you’ve followed some patterns&lt;/p&gt;

&lt;p&gt;4. When studying a Design Pattern, try hard to implement that solution in a problem. This will make total difference&lt;/p&gt;

&lt;h2 id=&quot;now-to-the-materials&quot;&gt;Now, to the materials!&lt;/h2&gt;

&lt;p&gt;Start with the classics:&lt;/p&gt;

&lt;h4 id=&quot;design-patternshttpwwwamazoncomdesign-patterns-object-oriented-professional-computingdp0201634988-aka-gang-of-four&quot;&gt;&lt;a href=&quot;http://www.amazon.com/Design-Patterns-Object-Oriented-Professional-Computing/dp/0201634988&quot;&gt;Design Patterns&lt;/a&gt; (a.k.a Gang of Four)&lt;/h4&gt;

&lt;p&gt;This is the all times classic. These four gentlemen were the firsts to formalized and compile all patterns found on Object Oriented Systems. Here my advice is to go one by one, pick a pattern, read it, understand it, implement it and ,finally, really understand it.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&quot;head-first-design-patternshttpwwwamazoncomhead-first-design-patterns-freemandp0596007124&quot;&gt;&lt;a href=&quot;http://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124&quot;&gt;Head First Design Patterns&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This one I’ve used when I didn’t understand a concept from the Gang of Four, it is easier to grasp the concepts, the approach is way less hardcore than the original GoF, but it still is a great book.&lt;/p&gt;

&lt;h3 id=&quot;code-samples&quot;&gt;Code Samples&lt;/h3&gt;

&lt;p&gt;That said, it’s always good to have examples of each Design Pattern by your side, so you can study the DP and check other examples, so real world examples are perfect for it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns/2707195#2707195&quot;&gt;List with Examples of Patterns implemented in the Java SE and EE API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dofactory.com/net/design-patterns&quot;&gt;List with Examples of patterns demonstrated with C#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sourcemaking.com/design_patterns&quot;&gt;Excellent examples and explanations of each Design Pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?PeopleProjectsAndPatterns&quot;&gt;Another great material on Design Patterns, with lots of great thoughts on it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe this is a good start to learn Design Pattern and I hope this helps someone, mainly if they’re struggling with the same doubts I had when trying to learn it.&lt;/p&gt;

&lt;p&gt;Oh, one more thing: &lt;strong&gt;Do not ever go Extreme Go Horse, really.&lt;/strong&gt;&lt;/p&gt;
</description>
				<pubDate>Tue, 06 Jan 2015 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2015/01/06/Why-How-and-Where-To-Learn-Design-Patterns.html</link>
				<guid isPermaLink="true">/general/setup/demo/2015/01/06/Why-How-and-Where-To-Learn-Design-Patterns.html</guid>
			</item>
		
			<item>
				<title>Thoughts on Automata Theory</title>
				<description>&lt;p&gt;I’ve been reading many texts on automata theory these times, and let me tell you, that’s such a wonderful thing. It pretty much explain how computers can…. compute! Simply put, Automata Theory deals with the logic of computation with respect to simple machines, referred to as Automata.&lt;/p&gt;

&lt;p&gt;From the mathematical models to represent it to the fun programming implementations, it’s really great and exciting to study it!&lt;/p&gt;

&lt;p&gt;Automatons are abstract models of machines that perform computations on an input by moving through a series of states or configurations. At each state of the computation, a transition function determines the next configuration on the basis of a finite portion of the present configuration. As a result, once the computation reaches an accepting configuration, it accepts that input. The most general and powerful automata is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Turing_machine&quot;&gt;Turing machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In layman’s terms, FSM &lt;em&gt;(Finite State Machine)&lt;/em&gt; or Automaton is a device &lt;em&gt;(hardware or software)&lt;/em&gt; that responds to external events and produces actions. The actions generated depend on the past history of the system, i.e. its state.&lt;/p&gt;

&lt;p&gt;This can go from a simple reserved word analyzer&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/thenautomata2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To big Regular Expressions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/bigdfa.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Automatons are also essentials to understand the &lt;strong&gt;limits of the computation&lt;/strong&gt;, thus, we have now two important problems coming out from this thought:&lt;/p&gt;

&lt;p&gt;1. What computers can do?&lt;/p&gt;

&lt;p&gt;2. What computers can do efficiently?&lt;/p&gt;

&lt;p&gt;The first one is called &lt;a href=&quot;http://courses.cs.washington.edu/courses/cse322/08sp/lec20.pdf&quot;&gt;Decidability&lt;/a&gt; and the second one is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Computers_and_Intractability&quot;&gt;intractability&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it brings our minds to the very beginning of the Computing Science, where many scientist were thinking about the limits of computation, not that today there aren’t many scientists working on it, but today many programmers, sadly, ignore this kind of knowledge.&lt;/p&gt;

&lt;p&gt;But, returning to our automatons, they’re represented by a bunch of states that we represent formally as \( Q \), a finite set of symbols ( \( \sum \) ), a transition function ( \( \delta \) ) that has two parameters: a state \( Q \) and a symbol, this function is responsible for the change of states in the automaton. An initial State from \( Q \) and a acceptance state also from \( Q \).&lt;/p&gt;

&lt;p&gt;So we can say that a generic automaton can be represented formally as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
A = \left ( Q, \sum, \delta, q0, F \right ) 
&lt;/script&gt;

&lt;p&gt;The automatons fall into two classifications, they can be:&lt;/p&gt;

&lt;h2 id=&quot;deterministic&quot;&gt;Deterministic&lt;/h2&gt;

&lt;p&gt;Where they can’t be at more than one state at the same time, it’s the real world way to represent abstracts machines, because this kind of automaton has no ambiguity . Here’s a simple example of an DFA &lt;em&gt;(Deterministic Finite Automaton)&lt;/em&gt; that only accepts string having 001 as substring.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/dfaex1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Informally speaking, if you put a string of 0s and 1s such as 10011 and process it number by number, following the states changes you will see that it will end the processing and your current state will be the acceptance state, so, this string is acceptable! So a string such as 11101010, if you try the same process, won’t end at an acceptable state, so we say that this string is not acceptable by this automaton.&lt;/p&gt;

&lt;h2 id=&quot;non-deterministic&quot;&gt;Non Deterministic&lt;/h2&gt;

&lt;p&gt;In this case, the automaton can change to multiple states at the same time, which means, it’s not so deterministic and precise as the deterministic automaton. So why one would use this non deterministic automaton? Simply put, it’s way easier to design a NFA (Non deterministic Finite Automaton) to solve a determined problem than to design a precise DFA to solve this same problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But! We’ve a problem here!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can a computer, which is an unambiguous machine, process something that is not deterministic?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It can’t. And it won’t!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/pergunta.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So why in the seven hells would i want to use this NFA if the machine can’t understand?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer is, every NFA has an equivalent DFA, which means, if a language is recognized by the NFA and by the DFA, they’re equivalent. All you have to do is &lt;a href=&quot;http://web.cecs.pdx.edu/~harry/compilers/slides/LexicalPart3.pdf&quot;&gt;translate&lt;/a&gt; the NFA into a DFA so the machine can use it!&lt;/p&gt;

&lt;h3 id=&quot;talking-about-language-what-is-it-in-this-context&quot;&gt;Talking about Language, what is it in this context?&lt;/h3&gt;

&lt;p&gt;Well, this is what we call &lt;strong&gt;Regular Language&lt;/strong&gt; which is a Language L accepted by an Automaton, &lt;strong&gt;so the language of an Automaton is the set of all string that it accepts.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can define the language of a DFA as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; 
L(A) = \{ \omega \,|\, \delta(q0, \omega)\, is\, in\, F \}
&lt;/script&gt;

&lt;p&gt;Which means, an Automaton processing a string, from its initial state, being computed by its transition function, if the processing ends in the acceptance state, this means that this is the language of this DFA.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-next-steps-and-further-readings&quot;&gt;Conclusion, next steps and further readings&lt;/h2&gt;

&lt;p&gt;As you may have noticed, there are unimaginable ways to use Automatons, it wasn’t even created to apply directly in the Computer Science, two neurophysiologists, were the first to present a description of finite Automata in 1943. Their paper, entitled, “A Logical Calculus Immanent in Nervous Activity”, had a huge impact in the computer science.&lt;/p&gt;

&lt;p&gt;For anyone who’s trying to dive deeper in this field, I strongly advice the &lt;a href=&quot;http://www.amazon.com/Introduction-Automata-Languages-Computation-Edition/dp/0321455363&quot;&gt;Ullman’s book on Automata and Complexity Theory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And soon I pretend to write few more thing on Automata, such as techniques to translate a NFA to a DFA using the algorithm of subset construction.&lt;/p&gt;

&lt;p&gt;For now my main goal was to simply introduce this beautiful branch of the Computer Science and Mathematics and show its applications.&lt;/p&gt;

&lt;p&gt;If something isn’t clear to you, drop me an email and let’s talk about it! :)&lt;/p&gt;
</description>
				<pubDate>Fri, 31 Oct 2014 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2014/10/31/Thoughts-on-Automata-Theory.html</link>
				<guid isPermaLink="true">/general/setup/demo/2014/10/31/Thoughts-on-Automata-Theory.html</guid>
			</item>
		
			<item>
				<title>Fun with graphs pt1</title>
				<description>&lt;p&gt;Graph Theory is definitely one of my favorite branches of the Mathematics &amp;amp; Computer Science, mostly because of its nearest infinity applications, in both real world problems and pure theoretical problems.&lt;/p&gt;

&lt;p&gt;These days I’ve been working (with my buddy Daniel Almeida) in a framework to create and manipulate graphs. Which means, creating a data structure to represent graphs, edges, vertexes and creating algorithms to work on this structure. All this is being made with Java and I’ll expose this code here, as I saw a terrible lack of good readable codes about it on the internet.&lt;/p&gt;

&lt;p&gt;So, before we start coding the graph’s structure… we must clarify what a graph is and why it’s so important to the Computer Science (and many other sciences).&lt;/p&gt;

&lt;p&gt;A graph is a ordered pair (G = (V,E)) , where (V) is a set of Vertices/Nodes and (E) is a set of Edges, an extremely mple example of a complete &lt;a href=&quot;http://mathworld.wolfram.com/SimpleGraph.html&quot;&gt;simple&lt;/a&gt;, &lt;a href=&quot;http://mathworld.wolfram.com/ConnectedGraph.html&quot;&gt;connected&lt;/a&gt; and &lt;a href=&quot;http://mathworld.wolfram.com/CompleteGraph.html&quot;&gt;complete&lt;/a&gt; graph is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/graph1.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, what’s the huge deal with this graph theory thing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, not only theoretical computer science problems lay on the graph theory but also in many other distinct fields, from particle physics, chemistry to &lt;a href=&quot;http://en.wikipedia.org/wiki/Mathematical_sociology&quot;&gt;sociology&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All this because every little thing in our universe is linked, and when this set of things became a “web of things”, we need to study its properties. And that’s where graph theory get in.&lt;/p&gt;

&lt;p&gt;So when a graph gets bigger, we need to represent this structure in a computational way, so we can compute things like shortest path between two nodes, connectivity and thousand of other properties and techniques.&lt;/p&gt;

&lt;p&gt;The most common ways to represent graph mathematically are:&lt;/p&gt;

&lt;h2 id=&quot;adjacency-matrix&quot;&gt;Adjacency Matrix&lt;/h2&gt;

&lt;p&gt;It’s a matrix that represent the adjacency of every node in a graph, it’s an excellent way to work computationally with graphs. The same graph that I presented previously in a visual way can be represented by the following adjacency matrix:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
 
\begin{bmatrix}
0 &amp; 1 &amp; 1 \\\ 
1 &amp; 0 &amp; 1 \\\ 
1 &amp; 1 &amp; 0
\end{bmatrix}
 %]]&gt;&lt;/script&gt;

&lt;h2 id=&quot;adjacency-list&quot;&gt;Adjacency List&lt;/h2&gt;

&lt;p&gt;This is another common way to represent graph mathematically, it’s a simple list of lists, each node in the main list points to a list of their adjacent nodes.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/graph2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/adjaceny-list.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-structures-to-represent-graphs&quot;&gt;Data Structures to represent Graphs&lt;/h2&gt;

&lt;p&gt;Ok, so, how do we represent graphs, edges and vertexes in terms of data structures? Before we dig deeper in the algorithms and the mathematical properties of the graphs, we need to create our Data Structure to work with.&lt;/p&gt;

&lt;h3 id=&quot;the-vertex&quot;&gt;The vertex&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
package GraphModels;

public class Vertex {
    /* This Data Structure will be capable to represent a Vertex,
    * which is a Node that will be used on a graph
    */
    
    public String id;
    public String name;
    public boolean visited = false;
    
    public Vertex(String id, String name) {
        this.id = id;
        this.name = name;
    }
    public String getId() {
        return id;
    }
    
    public String getName() {
        return name;
    }
    
  @Override
  public String toString() {
    return name;
  }
    
}

&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;For now you may be asking yourself why do we need a variable called “Visited”. Well, we’ll be using it in algorithms to walk through the graph, so we must need to know which nodes were visited. It will became more clear soon!&lt;/p&gt;

&lt;h3 id=&quot;the-edge&quot;&gt;The Edge&lt;/h3&gt;

&lt;p&gt;Yes, the edge must be represented computationally! That’s our way to figure out paths through the vertexes, the edge may or may not have a weight, the edge must know its source vertex and its destination vertex&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    package GraphModels;

    public class Edge {

         /* This Data Structure will be capable to represent a Edge,
        *    that will be used on a graph
        */

        public String id;
        public Vertex source;
        public Vertex destination;
        private final int weight;

        public Edge(String id, Vertex source, Vertex destination, int weight) {
            this.id = id;
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }

        public String getId() {
            return id;
        }
        public Vertex getDestination() {
            return destination;
        }

        public Vertex getSource() {
            return source;
        }
        public int getWeight() {
            return weight;
        }

        @Override
        public String toString() {
            return source + &quot; &quot; + destination;
        }
    } 
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;the-graph&quot;&gt;The Graph&lt;/h3&gt;

&lt;p&gt;That’s for sure the biggest and most complex part, don’t panic with the many algorithms already implemented in this code. I’ll be explaining one by one.&lt;/p&gt;

&lt;p&gt;We’re reading a text file containing the text file, if you want to test by yourself, make sure to create a .txt in the correct way and to pass the correct file path! You can find the instructions to write the .txt graph in the comments of this code&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    package GraphModels;

    import java.io.BufferedReader;
    import java.io.FileNotFoundException;
    import java.io.FileReader;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.LinkedList;
    import java.util.List;
    import java.util.Map;
    import java.util.Queue;

    public class Graph {

        /* This Data Structure will be capable to represent a Graph,
        *   where G = (V, E)
        */

       private  List nodes;
       private  List edges;
       public Vertex node;
       public Edge edge;
       private String path;
       private int [][] adjacencyMatrix;
       private Map nodesMatrixMap;
       private List adjacentNodes;
       public int degree;
       public int minDegree;
       public int maxDegree;
       public int avgDegree;

       public Graph() {

      }

      public List getNodes() {
        return nodes;
      }

      public List getEdges() {
        return edges;
      }

      public void setNodes(List vertex){
          this.nodes = vertex;
      }

      public void setEdges(List edges){
          this.edges = edges;
      }

      // Find an edge
      // TO-DO: Change == to equals
      public Edge getEdge(Vertex source, Vertex destination) {
          for (Edge edge : this.getEdges()) {
              if ((edge.getSource().getId() == source.getId() &amp;amp;&amp;amp; edge.getDestination().getId() == destination.getId()) || (edge.getSource().getId() == destination.getId() &amp;amp;&amp;amp; edge.getDestination().getId() == source.getId())) {
                  return edge;
              }
          }
          return null;
      }

      // Check if there is an edge for two given vertices
      public boolean hasEdge(Vertex source, Vertex destination) {
          Edge result = this.getEdge(source, destination);
          if (result != null) {
            return true;
          } else {
            return false;
          }
      }

      public List getAdjacentNodes(Vertex node){
          adjacentNodes = new ArrayList();

          for (Vertex currentNode : nodes){
              if (hasEdge(node, currentNode)){
                  adjacentNodes.add(currentNode);
              }
          }

          return adjacentNodes;
      }

      public int getMinDegree(){
          minDegree = 99999999;

          for (Vertex node : nodes){
              if (this.getDegree(node)maxDegree){
                  maxDegree = this.getDegree(node);
              }
          }

          return maxDegree;
      }
      public int getAvgDegree(){
          avgDegree = 0;

          for (Vertex node : nodes){
              avgDegree += this.getDegree(node);
          }
          avgDegree = avgDegree/nodes.size();

          return avgDegree;
      }

      //modified for our needs   
      public int breadthFirstSearch(Vertex rootNode){

          int visitedNodes = 0;
          Queue q = new LinkedList();
          q.add(rootNode);

          while (!q.isEmpty()){
              Vertex currentNode = (Vertex) q.peek();
              for (Vertex node : this.getAdjacentNodes(currentNode)){
                  if (!node.visited){   
                      node.visited = true;
                      q.add(node);
                      visitedNodes++;
                  }
              }
              q.remove();   
          }
          //reseting all flags
          for (Vertex node : nodes){
              node.visited = false;
          }

          return visitedNodes;

      }

      public boolean isConnected(){
          int numberOfNodes = nodes.size();

          for (Vertex node : nodes){
              if (!(this.breadthFirstSearch(node) == numberOfNodes)){
                  return false;
              }
          }
          return true;
      }

      //TO-DO: error treatment. 
      // while this treatment doesn't exist: BE EXTREMELY CAREFUL WITH GRAPH.TXT
      // the right syntax is:
      //line (1) :1,2,...,n 
      //line (2) :1-2
      //line (3) : weight of the previous connection
      //line (n) :2-n
      //line (n+1) : weight of the previous connection
      //line (n+2) :-1
      //where the first line you must declare the nodes, each one separated by comma
      //the second til the n-th line you must declare the connections between the nodes declared 
      //in the first line
      //after every connection, in the next line, you must declare the weight of the connection
      // leave everything zero to create a unweighted graph
      //after the last connection, you must end with a -1
      // if you don't do this your computer may explode lol
      //...
      //...
      //...
      // i don't know, i did never try that.
      public void createGraph(String path) throws FileNotFoundException, IOException{
          this.path = path;

          nodes = new ArrayList();
          edges = new ArrayList();

          FileReader fr = new FileReader(path);
          BufferedReader textReader = new BufferedReader(fr);

          //gets the first line, which are the nodes that must be created
          String TextData = textReader.readLine();

          //separate the string with numbers
          String[] nodesInString = TextData.split(&quot;\\s*,\\s*&quot;);

          //create the list of nodes
          for (String nodeInString : nodesInString){

              node = new Vertex(nodeInString, &quot;node &quot; + nodeInString);
              nodes.add(node);

          }

          //create the list of edges
          String edgeIntoString;
          Vertex vertex_aux1 = new Vertex(&quot;-1&quot;,&quot;-1&quot;);
          Vertex vertex_aux2 = new Vertex(&quot;-1&quot;,&quot;-1&quot;);;
          int n = 0;
          //varre a linha que tem x-y
          while (!(edgeIntoString = textReader.readLine()).equals(&quot;-1&quot;)){

              String[] nodesConnected = edgeIntoString.split(&quot;\\s*-\\s*&quot;);
              //varre os dois nodes

              int peso = Integer.parseInt(textReader.readLine());

                  //verifica se x e y passados no txt estão instanciados em nodes 
                  for (Vertex node : nodes){

                      if (nodesConnected[0].equals(node.getId())){
                          //se o node do txt foi achado em nodes

                          vertex_aux1 = new Vertex(node.getId(), node.getName());
                      }
                  }
                  for (Vertex node : nodes){

                      if (nodesConnected[1].equals(node.getId())){

                          vertex_aux2 = new Vertex(node.getId(), node.getName());
                      }
                  }

              edge = new Edge(Integer.toString(n),vertex_aux1, vertex_aux2, peso);
              edges.add(edge);
          }

      }
      // Add a new edge
      public boolean addEdge(Vertex source, Vertex destination) {
          Edge newEdge = new Edge(&quot;id&quot;, source, destination, 0);
          return this.edges.add(newEdge);
      }

      // Remove an edge
      public boolean removeEdge(Vertex source, Vertex destination) {

          Edge result = this.getEdge(source, destination);

          if (result != null) {
              return this.edges.remove(result);
          } else {
              System.out.println(&quot;Couldn't find edge&quot;);
              return false;
          }
      }

      public int getDegree(Vertex node){

          degree = 0;

          for (Vertex CurrentNode : nodes){
              if (hasEdge(node, CurrentNode)){
                  degree++;
              }
          }

          return degree;
      }

      public void printGraph() {

          for (Vertex node: this.getNodes()){
              System.out.println(node.getName());
              System.out.print(&quot;Adjacent nodes: &quot;);
              adjacentNodes = getAdjacentNodes(node);
              for (Vertex adjacentNode : adjacentNodes){
                  System.out.print(adjacentNode.getName() + &quot; &quot;);
              }

              System.out.println(&quot; &quot;);
              System.out.println(&quot;Degree of this node: &quot; + getDegree(node));
              System.out.println(&quot; &quot;); 
          }
          System.out.println(&quot;- - - - - - - - - - - - - - - - &quot;);
          System.out.println(&quot; &quot;);
          System.out.println(&quot;Min Degree of this Graph: &quot; + getMinDegree());
          System.out.println(&quot; &quot;);
          System.out.println(&quot;Max Degree of this Graph: &quot; + getMaxDegree());
          System.out.println(&quot; &quot;);
          System.out.println(&quot;Average Degree of this Graph: &quot; + getAvgDegree());
          System.out.println(&quot; &quot;);
          System.out.println(&quot;Graph is connected: &quot; + this.isConnected());
          System.out.println(&quot; &quot;);
          System.out.println(&quot;- - - - - - - - - - - - - - - - &quot;);
          System.out.println(&quot;Connections: &quot;);
          System.out.println(&quot; &quot;);
          for (Edge edge : this.getEdges() ){
              System.out.print(edge.getSource().getId() +&quot;&amp;lt;-&amp;gt;&quot;+edge.getDestination().getId()+&quot; &quot;);
              System.out.println(&quot;weight: &quot; + edge.getWeight());
          }
          System.out.println(&quot; &quot;);
          System.out.println(&quot;- - - - - - - - - - - - - - - - &quot;);
        }

      public void setAdjacencyMatrix() {

        initializeAdjacencyMatrix();
        int weigth;
        int source;
        int destination;
        for (Edge currentEdge : this.getEdges() ){
            weigth = currentEdge.getWeight();
            source = (int) nodesMatrixMap.get(currentEdge.getSource().getName());
            destination = (int) nodesMatrixMap.get(currentEdge.getDestination().getName());

            adjacencyMatrix[source][destination] = weigth; 
            //must be symmetric
            adjacencyMatrix[destination][source] = weigth; 
        }
      }

      public void initializeAdjacencyMatrix(){
          int numNodes = this.nodes.size();
          adjacencyMatrix = new int[numNodes][numNodes];
          nodesMatrixMap = new HashMap();
          for (int i = 0; i &amp;lt; numNodes; i++) {
              nodesMatrixMap.put(this.nodes.get(i).getName(), i);
              for (int j = 0; j &amp;lt; numNodes; j++) {
                  adjacencyMatrix[i][j] = -1;
              }
          }
      }

      public void printAdjacencyMatrix() {

          String sourceName;
          String destName;
          int source;
          int dest;

          System.out.println(&quot; &quot;);
          System.out.println(&quot;Adjacency Matrix: &quot;);
          System.out.println(&quot; &quot;);

          for (int i = 0; i &amp;lt; this.nodes.size(); i++) {
              sourceName = this.nodes.get(i).getName();
              source = (int) nodesMatrixMap.get(sourceName);
              for (int j = 0; j &amp;lt; this.nodes.size(); j++) {
                  destName = this.nodes.get(j).getName();
                  dest = (int) nodesMatrixMap.get(destName);
                  if (adjacencyMatrix[source][dest] == -1) {
                      System.out.print(&quot;- &quot;);
                  } else {
                      System.out.print(adjacencyMatrix[source][dest] + &quot; &quot;);
                  }
              }
              System.out.print(&quot;\n&quot;);
          }
      }

    }
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;the-test-file&quot;&gt;The test file&lt;/h3&gt;

&lt;p&gt;Here’s the file containing the main, if you want to test, remember to change the path file!&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;java hljs&quot;&gt;
    package graphproject;
    import GraphModels.*;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.List;

    public class GraphProject {

        //graph creation procedure
        private List nodes;
        private List edges;
        private Graph graph;
        public Vertex node;
        public Edge edge;

        public void printGraph(Graph graph) {
          for (Vertex node: graph.getNodes()){
                 System.out.println(node.toString());
          }

          for (Edge edge : graph.getEdges() ){
                 System.out.println(edge.toString());
                 System.out.println(&quot; &quot;);
          }

        }

        public void test() throws IOException{

            Graph graph = new Graph();
            graph.createGraph(&quot;/Users/daniel/Documents/workspace_java/GraphProject/src/graphproject/graph.txt&quot;);

            graph.printGraph();
            graph.setAdjacencyMatrix();
            graph.printAdjacencyMatrix();
        }
        //end of graph creation procedure

        public static void main(String[] args) throws IOException {
           GraphProject gp = new GraphProject();

           gp.test();
        }
    }
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;conclusion-and-next-steps&quot;&gt;Conclusion and next steps&lt;/h2&gt;

&lt;p&gt;At this moment, you’re perfectly able to create a graph (via .txt file) and run all those algorithms to extract information about your graph. Just make sure to import the right libraries and to put the files in the right package. Doing these little things right, I’m pretty sure this will work perfectly.&lt;/p&gt;

&lt;p&gt;But I’m sure you may be a little lost about a few algorithms and techniques we’ve implemented in the Graph.java. But, don’t worry, i’ll be explaining each method one by one in the next parts of this post!&lt;/p&gt;
</description>
				<pubDate>Fri, 10 Oct 2014 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2014/10/10/Fun-with-graphs-pt1.html</link>
				<guid isPermaLink="true">/general/setup/demo/2014/10/10/Fun-with-graphs-pt1.html</guid>
			</item>
		
			<item>
				<title>CRUD with Java, JSP and MySQL</title>
				<description>&lt;p&gt;One of the most common kind of applications in today's tech/business world is the CRUD system, that is the idea of the user interacting with a database, so the user can Create, Retrieve, Update and Delete &lt;em&gt;(yep, that awful name came from this)&lt;/em&gt; data from this database. Also, &lt;strong&gt;learning how to create a CRUD with a language is a great way to understand the basics of this language, the basics of software design, engineering and architecture.&lt;/strong&gt; In layman's term, a CRUD page is just a page where you can insert a thing, edit that thing, search that thing and delete that thing, just that!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;Our goal&lt;/h3&gt;
&lt;p&gt;Well, our scenario will be the simplest possible, so we can understand how to communicate with our database, so, it will be a simple contact book web app where we can do our CRUD with persons. This person will have &lt;!--more--&gt; a name, a phone number and a profession. We'll have a button to add a new person, a form to enter this new person's information, a page where will be loaded all persons from the database and buttons to edit and remove each person&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/smallcrudscreen-1024x300.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt; 
 &lt;/p&gt;
&lt;h3&gt;Our Technology Stack&lt;/h3&gt;
&lt;p&gt;We'll be using Java as our backend technology, Java ServerPages(JSP) as our view technology and MySQL as our relational database. Also, we'll be using the MVC architecture, which is the idea of separating the code by &lt;em&gt;&lt;strong&gt;M&lt;/strong&gt;odel&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;V&lt;/strong&gt;iew&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;C&lt;/strong&gt;ontroller&lt;/em&gt;, that's a whole other topic to study, you can take a look &lt;a href=&quot;http://blog.codinghorror.com/understanding-model-view-controller/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://www.bennadel.com/blog/2379-a-better-understanding-of-mvc-model-view-controller-thanks-to-steven-neiland.htm&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;For those who doesn't know JSP technology, I highly advice to study just a little bit of it before read this article, as this will be our main view technology, it's a great abstraction over the &lt;a href=&quot;http://www.ntu.edu.sg/home/ehchua/programming/java/JavaServlets.html&quot;&gt;Servlets&lt;/a&gt; technology. It simply helps to process Java code on our pages &lt;em&gt;without putting pure java syntax in the middle of our HTML&lt;/em&gt;, which would be extremely ugly and hard to maintain.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;The Data Access Object (DAO) pattern&lt;/h3&gt;
&lt;p&gt;The DAO pattern is a great way to abstract the communication with our database, simply put, the ObjectDAO is a class that will implement the CRUD methods of the Object. This way, our entity class, which is a Java class with only its attributes and their respective getters and setters, won't have to deal directly with the database, you can read more about the DAO pattern &lt;a href=&quot;http://www.oracle.com/technetwork/java/dataaccessobject-138824.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;The JDBC&lt;/h3&gt;
&lt;p&gt;This will be the driver that will abstract the connection with the database, it's pretty simple to use and it's the standard of the oracle, you can read more about it &lt;a href=&quot;http://www.oracle.com/technetwork/java/overview-141217.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally, the final view of our scenario&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/SmallCRUD1.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, for any guidance, here's the &lt;strong&gt;project hierarchy&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/smallcrudhierarchy.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Creating the Database&lt;/h3&gt;
&lt;p&gt;Small and simple step, just create the MySQL scheme that we'll use on this project, that is, just a table person, with name, profession and phone. Here's the code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql hljs&quot;&gt;
CREATE TABLE IF NOT EXISTS `smallcrud`.`person` (
  `idperson` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `phone` VARCHAR(45) NOT NULL,
  `profession` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idperson`))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;Creating the model&lt;/h3&gt;
&lt;p&gt;We'll create the Person, which will be our Java Bean for Person.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/digorithm/6c1612d01d4c58c45282.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Creating the connection class&lt;/h3&gt;
&lt;p&gt;The connection class will be the responsible for the connection with the database, using the JDBC API, it's fair simple:&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/digorithm/ed84ed8467c8e0813eca.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;!important: &lt;/strong&gt;These Strings &quot;jdbc:mysql://localhost:3306/simplecrud&quot;, &quot;root&quot;, &quot;sa&quot; depends on the configuration of the database that you created, the first one is the URI of the database, the second &quot;root&quot; is the user of that database, and the last &quot;sa&quot; is the password of that database&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, what happens when we use this class? Every time we call its method &quot;getConnection&quot; it returns a Connection with the database, that will be useful to create Statements, execute SQL Queries and plenty &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/sql/Connection.html&quot;&gt;more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;Creating the PersonDAO&lt;/h3&gt;
&lt;p&gt;The PersonDAO will be the class that will manipulate the class Person and communicate with the database, sending persons to database, updating persons, retrieving persons from the DB, which means, the CRUD main methods&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/digorithm/4177708c2bf222920845.js&quot;&gt;&lt;/script&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;Creating the Controller&lt;/h3&gt;

&lt;p&gt;This is the most confusing part. All because of the confusion of &lt;strong&gt;not&lt;/strong&gt; using JSP file to process the request, so what we will use? &lt;strong&gt;Servlets! &lt;/strong&gt; A Servlet fits better in the Controller role, because they won't show anything to the user, it will only get the request data, verify which action the user is trying to make, do something and redirect the user to another page. If you're using JSP files as controllers, probably you're &lt;a href=&quot;http://www.geekinterview.com/question_details/37537&quot;&gt;doing it wrong&lt;/a&gt;. So, basically, our PersonController will take the user request, see if the user is trying to edit, insert, update, remove or retrieve... and do the right thing, pay extremely attention to this code&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/digorithm/1f86192880faa70760a7.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Creating the View: Index.jsp&lt;/h3&gt;

&lt;p&gt;The index will be pretty simple and straight forward, it will just call our controller, passing the action by the get method, in this case, the ListPerson, the Controller will see that the action required is the ListPerson so it will do what it has to do, get all users from the database and list'em.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/digorithm/bb8cc63c5efb47f59c74.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Creating the View: ListPerson.jsp&lt;/h3&gt;

&lt;p&gt;The controller got the action coming from the index and tried to retrieve every person in the database and put all person objects in the session, if there is any Person in the DB, of course. Here is the code to do it, as you can see we’re already using the JSP tags to not use pure Java Scriplets  &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/digorithm/bcb0acccceeb8a652b8f.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Creating the View: Person.jsp&lt;/h3&gt;
&lt;p&gt;This will be the page that the user will be able to insert or edit a Person in the database so it can be loaded on the ListUser.jsp. As the Controller says, if the request has an ID, the Person.jsp will be loaded with a Person, otherwise, it won't. (&lt;em&gt;expecting that the user fill the form to add a new Person to the database&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.universocomputacao.com/wp-content/uploads/2014/07/smallcrudscreen2.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-74 size-medium&quot; src=&quot;http://www.universocomputacao.com/wp-content/uploads/2014/07/smallcrudscreen2-300x263.png&quot; alt=&quot;smallcrudscreen2&quot; width=&quot;300&quot; height=&quot;263&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/digorithm/c312976f8ddb79d71051.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Last details and conclusion&lt;/h3&gt;
&lt;p&gt;As you can see, at the first sight this implementation can be a little confusing, mainly because of the flow logic and the controller built with Servlet, understanding the flow means understanding it as a whole. Make sure you understand the MVC logic and the concepts behind JSP, Servlets and JDBC.&lt;/p&gt;

&lt;p&gt;If you're trying to copy the whole code, make sure you import the right libs, including the JSTL, responsible for a few tags I've used in this code. Also i used the Twitter's Bootstrap to help me with the frontend UI.&lt;/p&gt;

&lt;p&gt;You can download the code here on my &lt;a href=&quot;https://github.com/digorithm/SmallCRUD&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If there's something wrong with your implementation, please let me know, drop me an email or post a comment here and I'll make sure it will work properly! :]&lt;/p&gt;

</description>
				<pubDate>Tue, 22 Jul 2014 00:00:00 -0300</pubDate>
				<link>/general/setup/demo/2014/07/22/CRUD-with-Java,-JSP,-and-MySQL.html</link>
				<guid isPermaLink="true">/general/setup/demo/2014/07/22/CRUD-with-Java,-JSP,-and-MySQL.html</guid>
			</item>
		
	</channel>
</rss>
